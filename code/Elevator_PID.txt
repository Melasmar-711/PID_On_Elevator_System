#include <PID_v1.h>
#include<TimerOne.h>
int opt = 2;
int m1 = 7;
int m2 = 6;
int ena = 3;
int power=8;
int direct_ion =9;
int initialTime = 0;
int elTime = 0;
volatile double count;
double limit;
//int period = 100;
double rpm = 0;
double Setpoint, Output;
double Kp =0.01, Ki=1.3, Kd =0.0;
double error, totalError, diffError, pevError;
PID myPID(&rpm, &Output, &Setpoint, Kp, Ki, Kd, P_ON_M, DIRECT);

void setup() {

myPID.SetMode(AUTOMATIC);
Timer1.initialize(1000000);
Timer1.attachInterrupt(measureRPM);
attachInterrupt(digitalPinToInterrupt(opt), COUNT, CHANGE);
pinMode(opt, INPUT);
pinMode(m1, OUTPUT);
pinMode(m2, OUTPUT);
pinMode(ena, OUTPUT);
pinMode(direct_ion,INPUT_PULLUP);
pinMode(power,INPUT_PULLUP);

/*if (limit<=245&&limit>10){
myPID.SetOutputLimits((limit-10),(limit+10));
}else if(limit>245){
myPID.SetOutputLimits((limit-20),255);
}else{
myPID.SetOutputLimits((limit),(limit+30));
}*/
//Serial.print(limit);

//analogWrite(ena,255);

//analogWrite(ena,100);
Serial.begin(9600);
}

void COUNT() {
count++;
//Serial.println(count);
}
void measureRPM() {
detachInterrupt(digitalPinToInterrupt(opt));
//Serial.println(count);
rpm = (count / 24.0) * 60;
Serial.print("RPM:");
//Serial.print(0);
Serial.println(rpm);
//Serial.print(200);
//Go_up_or_down();
pidControl();
count = 0;


attachInterrupt(digitalPinToInterrupt(opt), COUNT, CHANGE);
}
void pidControl() {
myPID.Compute();
//Serial.println(Output);
analogWrite(ena, Output);
//error= Setpoint - rpm;
//totalError = error + prevError;
//diffError = error - prevError;
//prevError = error;
//if (totalError>=350){
//totalError=350;}
//if (totalError<=-350){
//totalError=-350;
//}
//Output = (Kp*error + Ki*totalError + (Kd)*diffError);
//if (Output <=255 && Output >0){
//analogWrite(ena,Output); //set motor speed
//}
//else{
//if (Output>255){
//analogWrite(ena,255);
//}
//else{
//analogWrite(ena,45);
//}}
}

/*void Go_up_or_down(){

//if going down


} */

void loop(){

if (digitalRead(power)==0){
digitalWrite(m1, LOW);
digitalWrite(m2, LOW);
}
if (digitalRead(power)==1 && digitalRead(direct_ion)==1){
digitalWrite(m1, HIGH);
digitalWrite(m2, LOW);
Setpoint = 100;
limit=map(Setpoint,0,430,0,255);
myPID.SetOutputLimits(limit-7,limit+8);

// if going up
}
if (digitalRead(power)==1&&digitalRead(direct_ion)==0){
digitalWrite(m2, HIGH);
digitalWrite(m1, LOW);
Setpoint = 100;
limit=map(Setpoint,0,880,0,255);
myPID.SetOutputLimits(limit-8,limit+8);

}
}
//}